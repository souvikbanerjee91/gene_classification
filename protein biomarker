library(tibble)
library(survival)
library(broom)
library(rowr)
library(Hmisc)
library(coxme)
library(INLA)
library(qgraph)
library(psych)

###################################################################
### Data Preparation ##############################################
###################################################################

genedata<-read.csv("jointGD.csv",header=T)
dim(genedata)
genedata<-genedata[-508,]
class(genedata)
sum(is.na(genedata))
gene_id<-genedata[,1]
data<-genedata[,-1]
data[data=="null"]<-NA

####################################################################
### Changing factor data to Numeric Value and replacing NA by 0 ####
####################################################################
for(i in 1:length(data))
{
data[,i]=as.numeric(as.character(data[,i]))
data[is.na(data)]<-0
}

data1=t(data)
colnames(data1)<-as.character(gene_id) 

####################################################################
### Data Merging ###################################################
####################################################################

patient_data=read.csv("repeated_measurement.csv",header=T)
rownames(data1)<-NULL
complete_data=cbind(patient_data,data1)

survival_data=read.csv("jontCD_1.csv",header=T)
survival_data=survival_data[,-c(1,14)]
full_data=cbind(complete_data,survival_data)
write.csv(full_data,"full_data.csv")

####################################################################
### Classifying event occurence ####################################
####################################################################

full_data$date_of_local_relapse =as.Date.factor(full_data$date_of_local_relapse,"%d-%m-%y")
full_data$date_of_metastatic_disease=as.Date.factor(full_data$date_of_metastatic_disease,"%d-%m-%y")
full_data$Sampling_Date =as.Date.factor(full_data$Sampling_Date,"%d-%m-%y")
full_data$inclusion_date =as.Date.factor(full_data$inclusion_date,"%d-%m-%y")
full_data$censoring_date =as.Date.factor(full_data$censoring_date,"%d-%m-%y")

event=c()
event_time=as.Date.character(c(),format = "%d-%m-%y")
for (i in 1:length(full_data$id))
{
  if (is.na(full_data$date_of_local_relapse[i])==TRUE && is.na(full_data$date_of_metastatic_disease[i])==FALSE)
  {
    event_time[i]=full_data$date_of_metastatic_disease[i]
  }else if(is.na(full_data$date_of_local_relapse[i])==FALSE && is.na(full_data$date_of_metastatic_disease[i])==TRUE)
  {
    event_time[i]=full_data$date_of_local_relapse[i]
  }else if (is.na(full_data$date_of_local_relapse[i])==TRUE && is.na(full_data$date_of_metastatic_disease[i])==TRUE)
  {
    event_time[i]=full_data$censoring_date[i]
  }else
  {
    event_time[i]=min(full_data$date_of_local_relapse[i],full_data$date_of_metastatic_disease[i])
  }
}

full_data1=cbind(full_data,event_time)

a=as.vector(unique(full_data1$patient_id))
newdata1=data.frame()
for(i in 1:length(a))
{
  print(i)
  pdata=full_data1[full_data1$patient_id==a[i],]
  duration_days=c()
  event=c()
  if(pdata$event_time[1]>pdata$Sampling_Date[length(pdata$id)])
  {
     for(j in 1:(length(pdata$id)-1))
    {
      duration_days[j]=pdata$Sampling_Date[j+1]-pdata$Sampling_Date[j]
    }
      duration_days[length(pdata$id)]=pdata$event_time[length(pdata$id)]-pdata$Sampling_Date[length(pdata$id)]
  }else if(pdata$event_time[1]==pdata$Sampling_Date[1])
  {
    for(j in 1:(length(pdata$id)-1))
    {
      duration_days[j]=pdata$Sampling_Date[j+1]-pdata$Sampling_Date[j]
    }
    duration_days[length(pdata$id)]=pdata$censoring_date[1]-pdata$Sampling_Date[length(pdata$id)]
  }else
  {
     d=sum(pdata$Sampling_Date < pdata$event_time)
     for(j in 1:(length(pdata$id)-1))
    {
       duration_days[j]=pdata$Sampling_Date[j+1]-pdata$Sampling_Date[j]
    } 
     duration_days[length(pdata$id)]=pdata$censoring_date[1]-pdata$Sampling_Date[length(pdata$id)]
     duration_days[d]=pdata$event_time[length(pdata$id)]-pdata$Sampling_Date[d]
     duration_days[d+1]=pdata$Sampling_Date[d+2]-pdata$event_time[length(pdata$id)]
    if (sum(pdata$Sampling_Date>pdata$event_time)==1)
    {
      duration_days[length(pdata$id)]=pdata$censoring_date[1]-pdata$event_time[1]
    }
  }
  if(pdata$event_time < pdata$censoring_date)
  {
    for(p in 1:length(pdata$id))
    {
      event[p]=as.numeric(pdata$event_time[p]<pdata$Sampling_Date[p])+1
    }
    event[length(pdata$id)]=2
  }else
  {
    event=1
  }
  pdata=cbind(pdata,duration_days,event)
  newdata1=rbind(newdata1,pdata)
}

write.csv(newdata1,"newdata1.csv")  
  
newdata1$time=as.factor(newdata1$time)

#################################################################
### Partition and Cox PH ########################################
#################################################################

result=c()
min_result=c()
positive_gene=c()
negative_gene=c()
volatile_gene=c()
for(i in 4:510)
{
  print(i)
  output1=data.frame()
  min_output1=data.frame()
  coxdata=newdata1[newdata1[,i]>0,]
  t=levels(newdata1$time)
  for(l in 1:length(t))
  {
  coxdata1=coxdata[coxdata$time==t[l],]
  p=range(coxdata1[,i][coxdata1[,i]>0])
  q=quantile(coxdata1[,i][coxdata1[,i]>0],probs = seq(0,1,0.1))
  output=data.frame()
  for(j in 2:10)
    {
    indicator=c()
    frail_id=c()
    for(k in 1:length(coxdata1[,i]))
      {
      if(coxdata1[k,i]<=q[j])
        {
      indicator[k]=0
        }else
        {
      indicator[k]= 1
        }
      }
    coxdata2=cbind(coxdata1,indicator)
    fitsurv=coxph(Surv(duration_days,event)~indicator,data=coxdata2,x=TRUE,control = coxph.control(iter.max=2000))
    m=cbind(j,q[j],summary(fitsurv)$coef[,1],glance(fitsurv)$p.value.log)
    output=rbind(output,m)
    }
  s=cbind(t[l],output)
  output1=rbind(output1,s)
  min_s=cbind(t[l],output[,1][output[,4]==min(output[,4])],output[,2][output[,4]==min(output[,4])],output[,3][output[,4]==min(output[,4])],min(output[,4]))
  min_output1=rbind(min_output1,min_s)
  }
  colnames(min_output1)<-c("time","partition","threshold",paste("min",colnames(newdata1)[i],"coef",sep='_'),paste("min",colnames(newdata1)[i],"p-value",sep='_'))
  min_result=cbind.fill(min_result,min_output1,fill=NA)
  colnames(output1)<-c("time","partition","threshold",paste(colnames(newdata1)[i],"coef",sep='_'),paste(colnames(newdata1)[i],"p-value",sep='_'))
  result=cbind.fill(result,output1,fill=NA)
  if(all(as.numeric(as.character(min_output1[,4]))>0))
    {
    positive_gene=rbind(positive_gene,colnames(newdata1)[i])
    }else if (all(as.numeric(as.character(min_output1[,4]))<0))
    {
    negative_gene=rbind(negative_gene,colnames(newdata1)[i])
    }else
    {
    volatile_gene=rbind(volatile_gene,colnames(newdata1)[i])
    }
 }
result=result[,-1]
min_result=min_result[,-1]
positive_gene
negative_gene
volatile_gene

attach(mydata)
mydata1<-mydata[,1:50]
mydata<-newdata1[,positive_gene]
CorMat1 <- cor_auto(mydata)
Graph_pcor <- qgraph(CorMat1, graph = "pcor", layout = "spring")

##################################################################
### Data preparation for frailty #################################
##################################################################

t=levels(newdata1$time)
fraildata=newdata1[newdata1$time==t[length(t)],]
fdata=data.frame()
for(i in 4:510)
{
  print(i)
  if(colnames(newdata1)[i] %in% positive_gene){d=1}
  if(colnames(newdata1)[i] %in% negative_gene){d=2}
  if(colnames(newdata1)[i] %in% volatile_gene){d=3}
  frailty_data=cbind(newdata1$patient_id,newdata1$time,i-3,colnames(newdata1)[i],d,newdata1[,i],newdata1$duration_days,newdata1$event) 
  fdata=rbind(fdata,frailty_data)
}

indx<-sapply(fdata,is.factor)
fdata[indx-5]<-lapply(fdata[indx-5],function(x) as.numeric(as.character(x)))
fdata_all=fdata
fdata=fdata[fdata[,6]>0,]
colnames(fdata)<-c("patient","time","gene","gene_name","cluster","expression","duration","event")
colnames(fdata_all)<-c("patient","time","gene","gene_name","cluster","expression","duration","event")

t=unique(fdata$gene)
q=data.frame()
for(i in 1:length(t))
{
  print(i)
  fraildata=fdata[fdata$gene==t[i],]
  gene_frail_aft=survreg(Surv(duration,event)~expression+frailty.gaussian(patient),
                     dist='weibull',data=fraildata)
  gene_frail_cox=coxph(Surv(duration,event)~expression+frailty(patient,dist="gaussian"),
                     data=fraildata)
  round(summary(gene_frail_aft)$table,4)
  p=cbind(fraildata$gene_name[1],t(gene_frail_aft$coefficients),gene_frail_aft$history$`frailty.gaussian(patient)`$theta,as.numeric(gene_frail_cox$coefficients),
          gene_frail_cox$history$`frailty(patient, dist = "gaussian")`$theta)
  q=rbind(q,p)
}
q
pattern<-cbind(unique(fdata$gene_name),q)
colnames(pattern)<-c("gene_name","gene","intercept_aft","expression_aft","sd_of_random_part_aft","expression_cox","sd_of_random_part_cox")                       
u=NULL
t=unique(fdata$gene)
for(i in 1:length(t))
{
  u[i]=max(fdata[fdata$gene==i,]$expression)-min(fdata[fdata$gene==i,]$expression)
}
pattern<-cbind(pattern,u)
v<-pattern$sd_of_random_part_aft/u
v1<-pattern$sd_of_random_part_cox/u
pattern<-cbind(pattern,v,v1)

d=NULL
for(i in 1:dim(pattern)[1])
{
  print(i)
  if(pattern$gene_name[i] %in% positive_gene){d[i]=1}
  if(pattern$gene_name[i] %in% negative_gene){d[i]=2}
  if(pattern$gene_name[i] %in% volatile_gene){d[i]=3}
}
pattern<-cbind(pattern,d)
colnames(pattern)[8:11]<-c("range","sd_aft/range","sd_cox/range","cluster")
par(mfrow=c(1,3))
hist(pattern[pattern$cluster==1,]$sd_of_random_part_aft[pattern[pattern$cluster==1,]$sd_of_random_part_aft!=max(pattern[pattern$cluster==1,]$sd_of_random_part_aft,na.rm=T)],
     breaks=20,xlab="AFT_sd_cluster_1",main="Histogram for AFT model Cluster 1")
hist(pattern[pattern$cluster==2,]$sd_of_random_part_aft,
     breaks=20,xlab="AFT_sd_cluster_2",main="Histogram for AFT model Cluster 2")
hist(pattern[pattern$cluster==3,]$sd_of_random_part_aft,
     breaks=20,xlab="AFT_sd_cluster_3",main="Histogram for AFT model Cluster 3")

hist(pattern[pattern$cluster==1,]$sd_of_random_part_cox,
     breaks=20,xlab="ph_sd_cluster_1",main="Histogram for PH model Cluster 1")
hist(pattern[pattern$cluster==2,]$sd_of_random_part_cox,
     breaks=20,xlab="PH_sd_cluster_2",main="Histogram for PH model Cluster 2")
hist(pattern[pattern$cluster==3,]$sd_of_random_part_cox,
     breaks=20,xlab="PH_sd_cluster_3",main="Histogram for PH model Cluster 3")
  
############################################################################################
### Fitting joint model with INLA using 1st and last observation for longitudinal data #####
############################################################################################

full_data1$sur_duration=full_data1$event_time-full_data1$inclusion_date
full_data1$event=as.numeric(full_data1$event_time!=full_data1$censoring_date)
surv_data=data.frame(cbind(full_data1$patient_id,full_data1$time,full_data1$sur_duration/365,full_data1$event))
colnames(surv_data)<-c("patient","time","sur_duration","event")
surv_data<-surv_data[!duplicated(surv_data$patient), ]

a=as.vector(unique(fdata$gene))
ar_result=NULL
ar_long=data.frame()
inla_frailty=c()
for(i in 1:507)
{
  f=NULL
  print(i)
  long_data=data.frame()
  ar_long=fdata[fdata$gene==a[i],]
  x1=NULL
  x2=NULL
  x3=NULL
  x4=NULL
  x1=data.frame(cbind(ar_long[ar_long$time==1,]$patient, ar_long[ar_long$time==1,]$expression))
  colnames(x1)=c("patient","expression")
  x2=data.frame(cbind(ar_long[ar_long$time==2,]$patient, ar_long[ar_long$time==2,]$expression))
  colnames(x2)=c("patient","expression")
  x3=data.frame(cbind(ar_long[ar_long$time==3,]$patient, ar_long[ar_long$time==3,]$expression))
  colnames(x3)=c("patient","expression")
  x4=data.frame(cbind(ar_long[ar_long$time==4,]$patient, ar_long[ar_long$time==4,]$expression))
  colnames(x4)=c("patient","expression")
  
  y1=Merge(x1,x2,x3,x4,id=~patient)
  colnames(y1)[2:5]<-c("t1","t2","t3","t4")
  y2=y1[is.na(y1$t1)==0,]
  
  d=NULL
  for(j in 1:dim(y2)[1])
  {
    if(sum(is.na(y2[j,]))>2)
    {
      d=c(d,j)
    }
  }
  if(is.null(d)==F){
    y2=y2[-d,] 
  }
  m=c()
  for(j in 1:dim(y2)[1])
  {
    if (is.na(y2$t4[j])==0){
      m[j]=y2$t4[j]
    }else if(is.na(y2$t3[j])==0){
      m[j]=y2$t3[j]
    }else
      m[j]=y2$t2[j]
  }
  long_data=data.frame(cbind(y2$patient,m,y2$t1))
  colnames(long_data)<-c("ID","y","t1")
  
  surv_data1<-surv_data[surv_data$patient %in% long_data$ID,]
  n1 <- nrow(long_data)
  n2 <- nrow(surv_data1)
  
  y.long <- c(long_data[,2], rep(NA, n2))
  y.surv <- inla.surv(time = c(rep(NA, n1), surv_data1$sur_duration), event = c(rep(NA, n1), surv_data1$event))
  Yjoint <- list(y.long, y.surv)
  
  linear.covariate <- data.frame(mu = as.factor(c(rep(1, n1), rep(2, n2))), 
                                 l.t1=c(long_data[,3],rep(0,n2)))
  
  ntime <- 1
  
  random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
                           U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)), 
                           U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)), 
                           U3 = c(rep(NA, n1), 1:n2))
  
  joint.data <- c(linear.covariate,random.covariate)
  joint.data$Y <- Yjoint
  
  formula = Y~ mu + l.t1-1+ f(U11 , model="iid2d", param = c(23,100,100,0), initial = c(-2.7,0.9,-0.22), n=2*n2) + 
    f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2) + f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+
    f(U3, model="iid")

  joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
  round(joint.inla$summary.fixed, 4)
  round(joint.inla$summary.hyper, 4)
  
  f=cbind(a[i],round(t(joint.inla$summary.fixed[1:3,1]),4),round(t(joint.inla$summary.fixed[1:3,2]),4),round(t(joint.inla$summary.hyper$mean), 4),round(t(joint.inla$summary.hyper$sd), 4))
  inla_frailty=rbind(inla_frailty,f)
}  
colnames(inla_frailty)=c("gene","mu1_mean","mu2_mean","l.t1_mean","mu1_sd","mu2_sd","l.t1_sd","gaussian_precision_mean","precision_U11_1_mean","precision_U11_2_mean","rho_mean","precision_U3_mean","U12_beta_mean","U22_beta_mean","gaussian_precision_sd","precision_U11_1_sd","precision_U11_2_sd","rho_sd","precision_U3_sd","U12_beta_sd","U22_beta_sd")

#############################################################
### Solo Joint Modeling on one gene (HGF) ###################
#############################################################

HGF<-read.csv("HGF.csv",header=T)
x1=NULL
x2=NULL
x3=NULL
x4=NULL
x1=data.frame(cbind(HGF[HGF$time==1,]$patient, HGF[HGF$time==1,]$y, HGF[HGF$time==1,]$t_stage, HGF[HGF$time==1,]$n_stage))
colnames(x1)=c("patient","y","t_stage","n_stage")
x2=data.frame(cbind(HGF[HGF$time==2,]$patient, HGF[HGF$time==2,]$y,HGF[HGF$time==2,]$t_stage, HGF[HGF$time==2,]$n_stage))
colnames(x2)=c("patient","y","t_stage","n_stage")
x3=data.frame(cbind(HGF[HGF$time==4,]$patient, HGF[HGF$time==4,]$y,HGF[HGF$time==4,]$t_stage, HGF[HGF$time==4,]$n_stage))
colnames(x3)=c("patient","y","t_stage","n_stage")
x4=data.frame(cbind(HGF[HGF$time==5,]$patient, HGF[HGF$time==5,]$y,HGF[HGF$time==5,]$t_stage, HGF[HGF$time==5,]$n_stage))
colnames(x4)=c("patient","y","t_stage","n_stage")

y1=Merge(x1,x2,x3,x4,id=~patient)
colnames(y1)<-c("patient","y_t1","t_stage_t1","n_stage_t1","y_t2","t_stage_t2","n_stage_t2","y_t3","t_stage_t3","n_stage_t3","y_t4","t_stage_t4","n_stage_t4")
Z<-data.frame(rep(y1$patient,4),rep(1:4,each=nrow(y1)),c(y1$y_t1,y1$y_t2,y1$y_t3,y1$y_t4),c(y1$t_stage_t1,y1$t_stage_t2,y1$t_stage_t3,y1$t_stage_t4),c(y1$n_stage_t1,y1$n_stage_t2,y1$n_stage_t3,y1$n_stage_t4))
colnames(Z)<-c("patient","time","y","t_stage","n_stage")
Z=Z[order(Z$patient),]
long_data<-Z
n<-unique(long_data$patient)

full_data1$sur_duration=full_data1$event_time-full_data1$inclusion_date
full_data1$event=as.numeric(full_data1$event_time!=full_data1$censoring_date)
new_surv_data=data.frame(cbind(full_data1$patient_id,full_data1$time,full_data1$t_stage,full_data1$sur_duration/365,full_data1$event))
colnames(new_surv_data)<-c("patient","time","t_stage","sur_duration","event")
new_surv_data<-new_surv_data[!duplicated(new_surv_data$patient),]
new_surv_data<-new_surv_data[new_surv_data$patient %in% n,]

n1 <- nrow(long_data)
n2 <- nrow(new_surv_data)
y.long <- c(long_data$y, rep(NA, n2))
y.surv <- inla.surv(time = c(rep(NA, n1), new_surv_data$sur_duration), event = c(rep(NA, n1), new_surv_data$event))
Yjoint <- list(y.long, y.surv)

linear.covariate <- data.frame(mu = as.factor(c(rep(1, n1), rep(2, n2))), 
                               l.time = c(long_data$time, rep(0, n2)), 
                               l.t_stage = c(long_data$t_stage, rep(0, n2)), 
                               l.n_stage = c(long_data$n_stage, rep(0, n2)), 
                               s.t_stage = c(rep(0, n1), new_surv_data$t_stage))

ntime <- length(unique(long_data$time))

random.covariate <- list(U11 = c(rep(1:n2, each = ntime),rep(NA, n2)),
                         U21 = c(rep(n2+(1:n2), each = ntime),rep(NA, n2)), 
                         U12 = c(rep(NA, n1), 1:n2), U22 = c(rep(NA, n1), n2+(1:n2)), 
                         U3 = c(rep(NA, n1), 1:n2))

joint.data <- c(linear.covariate,random.covariate)
joint.data$Y <- Yjoint

formula = Y~ mu + l.time+l.t_stage+l.n_stage+s.t_stage-1+ f(U11 , model="iid2d", param = c(23,100,100,0), initial = c(-2.7,0.9,-0.22), n=2*n2) +
  f(U21, l.time, copy="U11") +f(U12, copy="U11", fixed= FALSE, param=c(0,0.01), initial = -0.2)+
  f(U22, copy="U11", fixed = FALSE, param = c(0,0.01), initial = -1.6)+f(U3, model="iid")

joint.inla <- inla(formula, family = c("gaussian","exponentialsurv"),data = joint.data, control.compute=list(dic=TRUE))
round(joint.inla$summary.fixed, 4)
round(joint.inla$summary.hyper, 4)

#####################################################
#### Prognostic Score ###############################
#####################################################

full_data1$sur_duration=full_data1$event_time-full_data1$inclusion_date
newdata1=cbind(newdata1,full_data1$sur_duration)
colnames(newdata1)[dim(newdata1)[2]]=c("sur_duration")

result=c()
min_result_new=c()
for(i in 4:510)
{
  print(i)
  min_output=data.frame()
  output_a=data.frame()
  coxdata=newdata1[newdata1[,i]>0,]
  t=levels(newdata1$time)
  
  coxdata1=coxdata[coxdata$time==t[1],]
  p=diff(range(coxdata1[,i][coxdata1[,i]>0]))
  min_value=min(coxdata1[,i][coxdata1[,i]>0])
  q=quantile(coxdata1[,i][coxdata1[,i]>0],probs = seq(0,1,0.1))
  output=data.frame()
  for(j in 2:10)
    {
      indicator=c()
      for(k in 1:length(coxdata1[,i]))
      {
        if(coxdata1[k,i]<=q[j])
        {
          indicator[k]=0
        }else
        {
          indicator[k]= 1
        }
      }
      coxdata2=cbind(coxdata1,indicator)
      fitsurv=coxph(Surv(duration_days,event)~indicator,data=coxdata2,x=TRUE,control = coxph.control(iter.max=2000))
      m=cbind(j,q[j],summary(fitsurv)$coef[,1],glance(fitsurv)$p.value.log)
      output=rbind(output,m)
    }
    min_s=output[output[,4]==min(output[,4]),]
    min_s=cbind(colnames(coxdata)[i],min_s,p, min_value)
    min_output=rbind(min_output,min_s)
  
  colnames(min_output)<-c("gene_name","partition","threshold","coef","p-value","range","min_value")
  min_result_new=rbind(min_result_new,min_output)
}
write.csv(min_result_new,"baseline_cutoff_value.csv")

d=c()
for(i in 1:length(min_result_new$gene_name))
{
  print(i)
  if(min_result_new$gene_name[i] %in% positive_gene){d[i]=1}
  if(min_result_new$gene_name[i] %in% negative_gene){d[i]=2}
  if(min_result_new$gene_name[i] %in% volatile_gene){d[i]=3}
}

min_result_cluster<-cbind(min_result_new,d)

d1=na.omit(pattern[pattern$cluster==1,])
d2=na.omit(pattern[pattern$cluster==2,])
d_positive=d1[d1$sd_of_random_part_aft %in% head(sort(d1$sd_of_random_part_aft),10),]$gene_name
d_negative=d2[d2$sd_of_random_part_aft %in% head(sort(d2$sd_of_random_part_aft),10),]$gene_name

min_result_cluster_p<-min_result_cluster[min_result_cluster$gene_name %in% d_positive,]
min_result_cluster_n<-min_result_cluster[min_result_cluster$gene_name %in% d_negative,]
prog_gene<-rbind(min_result_cluster_p,min_result_cluster_n)

progdata=newdata1[newdata1$time==1,]
pid=unique(newdata1$patient_id)
duration=progdata$duration_days
status<-as.numeric(progdata$date_of_local_relapse !=0 | progdata$date_of_metastatic_disease !=0)
status<-1-as.numeric(is.na(status))

progdata=progdata[,colnames(progdata) %in% prog_gene$gene_name]
progdata=cbind(pid,progdata,duration,status)
HR.result=data.frame()
for(i in 2:(dim(progdata)[2]-2))
{
  pdata=progdata[progdata[,i]>0,]
  model=coxph(Surv(duration,status)~pdata[,i],data=pdata)
  prog.result=cbind(colnames(pdata)[i],exp(as.numeric(model$coefficients)))
  HR.result=rbind(HR.result,prog.result)
}
HR.result[,2]=as.numeric(as.character(HR.result[,2]))
s=sum(HR.result[,2])
colnames(HR.result)=c("gene_name","HR")
check_data=merge(prog_gene,HR.result,by="gene_name")
progdata1<-progdata[apply(progdata[c(2:21)],1,function(z) !any(z==0)),] 
p_percent=check_data$HR[check_data$d==1]/sum(check_data$HR[check_data$d==1])
n_percent=(1/check_data$HR[check_data$d==2])/sum(1/check_data$HR[check_data$d==2])
percent=c(p_percent,n_percent)

gene_name_p=prog_gene$gene_name[prog_gene$d==1]
gene_name_n=prog_gene$gene_name[prog_gene$d==2]
gene_name=c(as.character(gene_name_p),as.character(gene_name_n))
w=cbind(gene_name,percent)
check_data=merge(check_data,w,by="gene_name")
check_data$percent=as.numeric(as.character(check_data$percent))

prog_score=c()
for(i in 1:dim(progdata1)[1])
{
  I1=0
  I2=0
  for(j in 2:(dim(progdata1)[2]-2))
  {
    print(c(i,j))
    rhat=0
    shat=0
    l=colnames(progdata1[j])
    k=check_data[check_data$gene_name==l,]$percent
    m=check_data[check_data$gene_name==l,]$coef
    cl=check_data[check_data$gene_name==l,]$d
    ran=check_data[check_data$gene_name==l,]$range
    mi=check_data[check_data$gene_name==l,]$min_value
    if(cl==1)
    {
      r=k*((progdata1[i,j]-mi)/ran)
      I1=r+I1
    }else
    {
      s=k*((progdata1[i,j]-mi)/ran)
      I2=s+I2
    }
  }
  g=cbind(progdata1$pid[i],I1,I2,I1+I2)
  prog_score=rbind(prog_score,g)
}
prog_score=cbind(prog_score,progdata1$duration,progdata1$status)
colnames(prog_score)=c("pid","prog_score_1","prog_score_2","sum_of_score","duration","status")

###########################################
### Brier Score ###########################
###########################################
library(pec)
library(riskRegression)

prog_score=data.frame(prog_score)
Models <- list("Cox Model 1"=coxph(Surv(duration,status)~prog_score_1,data=prog_score,x=TRUE,y=TRUE),
               "Cox Model 2"=coxph(Surv(duration,status)~prog_score_2,data=prog_score,x=TRUE,y=TRUE),
               "Cox Model 3"=coxph(Surv(duration,status)~sum_of_score,data=prog_score,x=TRUE,y=TRUE))

f<-coxph(Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,y=TRUE,x=TRUE)
PredError <- pec(object=Models,formula=Surv(duration,status)~prog_score_1+prog_score_2,data=prog_score,exact=TRUE,cens.model="marginal",splitMethod="none",B=0,verbose=TRUE)
print(PredError,times=seq(5,30,5))
summary(PredError)
plot(PredError,xlim=c(0,80),xlab="Days",title="Brier Score")
